<?php

/**
 * Helper function to build necessary taxonomy terms
 *
 * @param string $vocabulary_machine_name
 *   Machine name of the taxonomy vocabulary
 * @param array $terms
 *   Array with the terms to insert into the vocabulary.
 *
 * @return boolean
 *   Returns FALSE if the vocabulary couldn't be found.
 */
function _wanderitis_build_taxonomy($vocabulary_machine_name, array $terms) {
  // Fetch necessary vocabulary.
  if (!($vocabulary = taxonomy_vocabulary_machine_name_load($vocabulary_machine_name))) {
    return FALSE;
  }
  // Check which terms need to be created.
  foreach ($terms as $term_name) {
    $term_objects = taxonomy_term_load_multiple(array(), array('name' => trim($term_name), 'vid' => $vocabulary->vid));
    if (empty($term_objects)) {
      $new_term = (object) array(
        'vid' => $vocabulary->vid,
        'name' => $term_name,
      );
      taxonomy_term_save($new_term);
    }
  }
  return TRUE;
}

/**
 * Ensure the necessary teaser taxonomy terms are available.
 */
function wanderitis_update_7001() {
  $terms = array(
    'article',
    'page',
    'Hike-Search',
    'Blog-List',
    'Contact-Form',
  );
  $node_type_names = node_type_get_names();
  $node_types = array_keys($node_type_names);
  $terms += $node_types;

  return _wanderitis_build_taxonomy('teaser_display_region', $terms);
}


/**
 * Ensure the necessary taxonomy terms are available.
 */
function wanderitis_update_7002() {
  $taxonomies = array(
    'time_of_day' => array(
      'Morning',
      'Noon',
      'Afternoon',
      'Evening',
      'Night',
    ),
    'level_of_difficulty' => array(
      'low',
      'intermediate',
      'hard',
    ),
  );
  foreach ($taxonomies as $vocabulary_name => $terms) {
    return _wanderitis_build_taxonomy($vocabulary_name, $terms);
  }
}

/**
 * Sparkify the installation.
 */
function wanderitis_update_7003() {
  // Enable sparky modules.
  module_enable(array(
    'every_field',
    'admin',
    'admin_tools',
    'entity',
    'fape',
    'jquery_update',
    'json2',
    'libraries',
    'page_manager',
    'panels',
    'panels_ipe',
    'iconfonts',
    'navbar',
    'edit',
    'edit_aloha',
    'aloha',
    'gridbuilder',
    'layout',
    'module_filter',
    'filter_true_wysiwyg',
    'cando_sparkify',
  ));

  // Disable non spark modules.
  module_disable(array(
    'wysiwyg',
  ));

  // Enable the admin theme.
  db_update('system')
    ->fields(array('status' => 1))
    ->condition('type', 'theme')
    ->condition('name', 'ember')
    ->execute();
  variable_set('admin_theme', 'ember');
  variable_set('node_admin_theme', '1');

  // Set the jQuery version to 1.7.
  variable_set('jquery_update_compression_type', 'min');
  variable_set('jquery_update_jquery_cdn', 'none');
  variable_set('jquery_update_jquery_version', '1.7');

  // Configure text formats for Aloha.
  // Load Filtered HTML.
  $filtered_html_format = filter_format_load('filtered_html');
  $filtered_html_format->filters = filter_list_format('filtered_html');

  // Add tags required by Aloha module.
  $filtered_html_format->filters['filter_html']->settings['allowed_html'] .= ' <br> <p> <img> <pre>';

  // Turn on image caption support and make it a higher weight.
  $filtered_html_format->filters['edit_filter_captioned_image']->status = 1;
  $filtered_html_format->filters['edit_filter_captioned_image']->weight = 11;

  // @todo: Configure Image Resize Filter.
  // @todo: Configure Token Filter.

  // Cast everything to an array for filter_format_save(). Ugh.
  foreach ($filtered_html_format->filters as $id => $filter) {
    $filtered_html_format->filters[$id] = (array) $filter;
  }
  filter_format_save($filtered_html_format);

  // Clear zee cache.
  filter_formats_reset();
}

/**
 * Enable wanderitis layout module.
 */
function wanderitis_update_7004() {
  module_enable(array('wanderitis_layout'));
}

/**
 * Disabled admin_menu.
 */
function wanderitis_update_7005() {
  module_disable(array('admin_menu'));
}

/**
 * Enable rules and mailing system.
 */
function wanderitis_update_7006() {
  module_enable(array('entity_token', 'rules', 'rules_admin', 'mimemail'));
}

/**
 * Enable admin icons.
 */
function wanderitis_update_7007() {
  module_enable(array('admin_icons'));
}

/**
 * Disabled toolbar.
 */
function wanderitis_update_7008() {
  module_disable(array('toolbar'));
}

/**
 * Enable googleanalytics and entityreference. Remove references.
 */
function wanderitis_update_7009() {
  module_enable(array('googleanalytics', 'entityreference'));
  module_disable(array('references'));
}

/**
 * Update spark.
 */
function wanderitis_update_7010() {
  module_enable(array('ckeditor'));
  module_disable(array('wysiwyg', 'filter_true_wysiwyg', 'aloha', 'media_aloha'));
}

/**
 * Enable form_save.
 */
function wanderitis_update_7011() {
  module_enable(array('form_save'));
}

